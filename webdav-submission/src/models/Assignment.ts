// tslint:disable
/**
 * Submissions
 * This API specifies the submissions service, as accessed by the web admin UI used by students, lecturers and tutors. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The assignment is part of an lecture and can be linked to a media
 * @export
 * @interface Assignment
 */
export interface Assignment  {
    /**
     * The globally recognized ID of an Assignment.
     * @type {string}
     * @memberof Assignment
     */
    id?: string;
    /**
     * The ID of the lecture the assignment is part of. (foreign)
     * @type {number}
     * @memberof Assignment
     */
    lectureID?: number;
    /**
     * The ID of the medium the submission is linked to (foreign)
     * @type {number}
     * @memberof Assignment
     */
    mediumID?: number;
    /**
     * Due date of an submission. Submissions afterwards will be rejected. Currently there is no support for a grace period.
     * @type {Date}
     * @memberof Assignment
     */
    deadline?: Date;
    /**
     * A descriptive title for the assignment
     * @type {string}
     * @memberof Assignment
     */
    title?: string;
    /**
     * Predefine filetype for upload in webUI, currently not enforced by backend.
     * @type {string}
     * @memberof Assignment
     */
    acceptedFileType?: string;
    /**
     * Maximum of files to be submitted. 0 for infinity
     * @type {number}
     * @memberof Assignment
     */
    maxFileCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof Assignment
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Assignment
     */
    updatedAt?: Date;
}

export function AssignmentFromJSON(json: any): Assignment {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lectureID': !exists(json, 'lectureID') ? undefined : json['lectureID'],
        'mediumID': !exists(json, 'mediumID') ? undefined : json['mediumID'],
        'deadline': !exists(json, 'deadline') ? undefined : new Date(json['deadline']),
        'title': !exists(json, 'title') ? undefined : json['title'],
        'acceptedFileType': !exists(json, 'acceptedFileType') ? undefined : json['acceptedFileType'],
        'maxFileCount': !exists(json, 'maxFileCount') ? undefined : json['maxFileCount'],
        'createdAt': !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
    };
}

export function AssignmentToJSON(value?: Assignment): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'lectureID': value.lectureID,
        'mediumID': value.mediumID,
        'deadline': value.deadline === undefined ? undefined : value.deadline.toISOString(),
        'title': value.title,
        'acceptedFileType': value.acceptedFileType,
        'maxFileCount': value.maxFileCount,
        'createdAt': value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
        'updatedAt': value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
    };
}


